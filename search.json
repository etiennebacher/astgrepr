[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 astgrepr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Etienne Bacher. Author, maintainer, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bacher E (2024). astgrepr: Parse Manipulate R Code. R package version 0.0.1, https://github.com/etiennebacher/astgrepr.","code":"@Manual{,   title = {astgrepr: Parse and Manipulate R Code},   author = {Etienne Bacher},   year = {2024},   note = {R package version 0.0.1},   url = {https://github.com/etiennebacher/astgrepr}, }"},{"path":"/index.html","id":"astgrepr","dir":"","previous_headings":"","what":"Parse and Manipulate R Code","title":"Parse and Manipulate R Code","text":"astgrepr provides R bindings ast-grep Rust crate. ast-grep tool parse abstract syntax tree (AST) code perform search rewrite code. extremely useful build linters, stylers, perform lot code analysis. Since astgrepr can used low-level foundation tools (linters), doesn’t rely R dependencies (Rust dependencies brought ast-grep).","code":""},{"path":"/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"Parse and Manipulate R Code","text":"","code":"library(astgrepr)  src <- \"library(tidyverse)     x <- rnorm(100, mean = 2)     any(duplicated(y))     plot(x)     any(duplicated(x))\"  node <- src |>    tree_new() |>    tree_root()  # get everything inside rnorm() node |>    node_find(pattern = \"rnorm($$$A)\") |>    node_get_multiple_matches(\"A\") |>    node_text_all() #> [[1]] #> [1] \"100\" #>  #> [[2]] #> [1] \",\" #>  #> [[3]] #> [1] \"mean = 2\" # find occurrences of any(duplicated()) node |>    node_find_all(pattern = \"any(duplicated($A))\") |>    node_text_all() #> [[1]] #> [1] \"any(duplicated(y))\" #>  #> [[2]] #> [1] \"any(duplicated(x))\""},{"path":"/index.html","id":"related-tools","dir":"","previous_headings":"","what":"Related tools","title":"Parse and Manipulate R Code","text":"recent work linking tree-sitter R. competing astgrepr rather complement : r-lib/tree-sitter-r: provide R grammer used tools built tree-sitter. astgrepr relies grammar hood. DavisVaughan/r-tree-sitter: companion r-lib/tree-sitter-r. gives way get tree-sitter representation code directly R. useful learn tree-sitter represents R grammar, required want advanced use astgrepr. However, doesn’t provide way easily select specific nodes (e.g. based patterns).","code":""},{"path":"/reference/ast_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a rule — ast_rule","title":"Build a rule — ast_rule","text":"Rules core astgrepr. used search nodes used node_match*() node_find*() functions. ast_rule() flexible function allows one build simple rules also much complex specific ones.","code":""},{"path":"/reference/ast_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a rule — ast_rule","text":"","code":"ast_rule(   pattern = NULL,   kind = NULL,   regex = NULL,   inside = NULL,   has = NULL,   precedes = NULL,   follows = NULL,   all = NULL,   any = NULL,   not = NULL,   matches = NULL,   id = NULL )"},{"path":"/reference/ast_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a rule — ast_rule","text":"pattern pattern look . can string object class \"astgrep_pattern_rule\" created pattern_rule(). can contain meta-variables capture certain elements. meta-variables can recovered node_get_match() node_get_multiple_matches(). meta-variables must start $ uppercase letters, e.g. $VAR. kind kind nodes look . regex regex used look nodes. must follow syntax Rust regex crate. inside node node look positioned? can another rule made ast_rule() object class \"astgrep_relational_rule\" created relational_rule(). input type inside, looks nodes contain another type node. precedes input type inside, looks nodes precede another type node. follows input type inside, looks node follow another type node. takes one list rules made ast_rule(). matches nodes respect rules. takes one list rules made ast_rule(). matches nodes respect rules. takes one list rules made ast_rule(). excludes nodes selection. matches takes id another rule. useful reuse rules. id name rule. can reused another rule matches.","code":""},{"path":"/reference/ast_rule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a rule — ast_rule","text":"list (possibly nested) class \"astgrep_rule\".","code":""},{"path":"/reference/ast_rule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a rule — ast_rule","text":"","code":"ast_rule(pattern = \"print($A)\") #> <ast-grep rule: <unnamed>> #> pattern: print($A)  ast_rule(   pattern = \"print($A)\",   inside = ast_rule(     any = ast_rule(       kind = c(\"for_statement\", \"while_statement\")     )   ) ) #> <ast-grep rule: <unnamed>> #> pattern: print($A) #> inside: #>   any: #>     kind: #>       - for_statement #>       - while_statement"},{"path":"/reference/expect_snapshot.html","id":null,"dir":"Reference","previous_headings":"","what":"tinytest helper — expect_snapshot","title":"tinytest helper — expect_snapshot","text":"tinytest helper","code":""},{"path":"/reference/expect_snapshot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tinytest helper — expect_snapshot","text":"","code":"expect_snapshot(label, current)"},{"path":"/reference/node-find.html","id":null,"dir":"Reference","previous_headings":"","what":"Find node(s) matching a pattern — node-find","title":"Find node(s) matching a pattern — node-find","text":"functions find one several nodes based rule: node_find() returns first node found; node_find_all() returns list nodes found. arguments (kind) require knowledge tree-sitter grammar R. grammar can found : https://github.com/r-lib/tree-sitter-r/blob/main/src/grammar.json.","code":""},{"path":"/reference/node-find.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find node(s) matching a pattern — node-find","text":"","code":"node_find(x, ..., files = NULL)  node_find_all(x, ..., files = NULL)"},{"path":"/reference/node-find.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find node(s) matching a pattern — node-find","text":"x node, either tree_root() another node_*() function. ... number rules created ast_rule(). files vector filenames containing rules. must .yaml files.","code":""},{"path":"/reference/node-find.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find node(s) matching a pattern — node-find","text":"node_find() returns single SgNode. node_find_all() returns list SgNodes.","code":""},{"path":"/reference/node-find.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find node(s) matching a pattern — node-find","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     plot(mtcars)     any(duplicated(x))\"  root <- src |>   tree_new() |>   tree_root()  root |>   node_find(ast_rule(pattern = \"any(duplicated($A))\")) #> <List of 1 rule> #> |-- rule_1 : 1 node  root |>   node_find_all(ast_rule(pattern = \"any(duplicated($A))\")) #> <List of 1 rule> #> |-- rule_1 : 2 nodes  # using the 'kind' of the nodes to find elements src <- \"   a <- 1   while (TRUE) { print('a') } \"  root <- src |>   tree_new() |>   tree_root()  root |>   node_find(ast_rule(kind = \"while_statement\")) #> <List of 1 rule> #> |-- rule_1 : 1 node  # one can pass several rules at once src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     plot(mtcars)     any(duplicated(x))     while (TRUE) { print('a') }\" root <- src |>   tree_new() |>   tree_root()  root |>   node_find(     ast_rule(pattern = \"any(duplicated($A))\"),     ast_rule(kind = \"while_statement\")   ) #> <List of 2 rule> #> |-- rule_1 : 1 node #> |-- rule_2 : 1 node  root |>   node_find_all(     ast_rule(pattern = \"any(duplicated($A))\"),     ast_rule(kind = \"while_statement\")   ) #> <List of 2 rules> #> |-- rule_1 : 2 nodes #> |-- rule_2 : 1 nodes"},{"path":"/reference/node-fix.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the code in the tree — node-fix","title":"Change the code in the tree — node-fix","text":"node_replace() stores replacement particular node, change actual code. node_replace_all() several nodes (e.g. output node_find_all()). node_commit_edits() takes list replacements (output node_replace() node_replace_all()) applies one one input node, returning modified code.","code":""},{"path":"/reference/node-fix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the code in the tree — node-fix","text":"","code":"node_replace(x, new_text)  node_replace_all(x, new_text)  node_commit_edits(x, edits)"},{"path":"/reference/node-fix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the code in the tree — node-fix","text":"x node, either tree_root() another node_*() function. new_text replacement node. edits list replacements (output node_replace() node_replace_all()).","code":""},{"path":"/reference/node-fix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the code in the tree — node-fix","text":"","code":"src <- \"x <- rnorm(100, mean = 2) any(duplicated(y)) plot(mtcars) any(duplicated(x))\"  root <- src |>   tree_new() |>   tree_root()  # one replacement ------------------------------------------  to_fix <- root |>   node_find(ast_rule(pattern = \"any(duplicated($A))\"))  fix <- to_fix |>   node_replace(     paste0(       \"anyDuplicated(\",       node_text(node_get_match(to_fix, \"A\")),       \") > 0\"     )   )  fixed <- node_commit_edits(root, fix) cat(fixed[[1]]) #> x <- rnorm(100, mean = 2) #> anyDuplicated(y) > 0 #> plot(mtcars) #> any(duplicated(x)) # # #"},{"path":"/reference/node-get-match.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the match(es) from a meta-variable — node-get-match","title":"Get the match(es) from a meta-variable — node-get-match","text":"functions extract content meta-variable specified node_find(): node_get_match() used meta-variable refers single pattern, e.g. \"plot($); node_get_multiple_matches() used meta-variable captures elements pattern, e.g. \"plot($$$)\".","code":""},{"path":"/reference/node-get-match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the match(es) from a meta-variable — node-get-match","text":"","code":"node_get_match(x, meta_var)  node_get_multiple_matches(x, meta_var)"},{"path":"/reference/node-get-match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the match(es) from a meta-variable — node-get-match","text":"x node, either tree_root() another node_*() function. meta_var name given one meta-variable(s) node_find().","code":""},{"path":"/reference/node-get-match.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the match(es) from a meta-variable — node-get-match","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     plot(mtcars)\"  root <- src |>   tree_new() |>   tree_root()  # we capture a single element with \"$A\" so node_get_match() can be used root |>   node_find(ast_rule(pattern = \"plot($A)\")) |>   node_get_match(\"A\") #> <List of 1 rule> #> |-- rule_1 : 1 node  # we can specify the variable to extract root |>   node_find(ast_rule(pattern = \"rnorm($A, $B)\")) |>   node_get_match(\"B\") #> <List of 1 rule> #> |-- rule_1 : 1 node  # we capture many elements with \"$$$A\" so node_get_multiple_matches() can # be used here root |>   node_find(ast_rule(pattern = \"rnorm($$$A)\")) |>   node_get_multiple_matches(\"A\") #> <List of 1 rule> #> |-- rule_1 : 3 nodes"},{"path":"/reference/node-info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get more precise information on a node — node-info","title":"Get more precise information on a node — node-info","text":"Get precise information node","code":""},{"path":"/reference/node-info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get more precise information on a node — node-info","text":"","code":"node_matches(x, ..., files = NULL)  node_inside(x, ..., files = NULL)  node_has(x, ..., files = NULL)  node_precedes(x, ..., files = NULL)  node_follows(x, ..., files = NULL)"},{"path":"/reference/node-info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get more precise information on a node — node-info","text":"x node, either tree_root() another node_*() function. ... number rules created ast_rule(). files vector filenames containing rules. must .yaml files.","code":""},{"path":"/reference/node-info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get more precise information on a node — node-info","text":"","code":"src <- \" print('hi') fn <- function() {   print('hello') } \" root <- src |>   tree_new() |>   tree_root()  some_node <- root |>   node_find(ast_rule(pattern = \"print($A)\"))  node_text(some_node) #> $rule_1 #> [1] \"print('hi')\" #>   some_node |>   node_get_match(\"A\") |>   node_matches(ast_rule(kind = \"argument\")) #> $rule_1 #> $rule_1[[1]] #> [1] TRUE #>  #>"},{"path":"/reference/node-is.html","id":null,"dir":"Reference","previous_headings":"","what":"Get information on nodes — node-is","title":"Get information on nodes — node-is","text":"Get information whether node leaf (meaning children) whether named.","code":""},{"path":"/reference/node-is.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get information on nodes — node-is","text":"","code":"node_is_leaf(x)  node_is_named(x)  node_is_named_leaf(x)"},{"path":"/reference/node-is.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get information on nodes — node-is","text":"x node, either tree_root() another node_*() function.","code":""},{"path":"/reference/node-is.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get information on nodes — node-is","text":"logical value.","code":""},{"path":"/reference/node-is.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get information on nodes — node-is","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     x <- z + 1     any(duplicated(x))\"  root <- src |>   tree_new() |>   tree_root()  node_is_leaf(root) #> [[1]] #> [1] FALSE #>   root |>   node_find(ast_rule(pattern = \"z\")) |>   node_is_leaf() #> $rule_1 #> [1] TRUE #>   root |>   node_find(ast_rule(pattern = \"z\")) |>   node_is_named() #> $rule_1 #> [1] TRUE #>"},{"path":"/reference/node-range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the start and end positions of a node — node-range","title":"Get the start and end positions of a node — node-range","text":"Get start end positions node","code":""},{"path":"/reference/node-range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the start and end positions of a node — node-range","text":"","code":"node_range(x)  node_range_all(x)"},{"path":"/reference/node-range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the start and end positions of a node — node-range","text":"x node, either tree_root() another node_*() function.","code":""},{"path":"/reference/node-range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the start and end positions of a node — node-range","text":"list two elements: start end. vector two values indicating row column. 0-indexed.","code":""},{"path":"/reference/node-range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the start and end positions of a node — node-range","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     plot(x)     any(duplicated(x))\"  root <- src |>   tree_new() |>   tree_root()  node_range(root) #> [[1]] #> [[1]]$start #> [1] 0 0 #>  #> [[1]]$end #> [1]  3 22 #>  #>   root |>   node_find(ast_rule(pattern = \"rnorm($$$A)\")) |>   node_range() #> $rule_1 #> $rule_1$start #> [1] 0 5 #>  #> $rule_1$end #> [1]  0 25 #>  #>   # There is also an \"_all\" variant when there are several nodes per rule root |>   node_find_all(     ast_rule(pattern = \"any(duplicated($A))\"),     ast_rule(pattern = \"plot($A)\")   ) |>   node_range_all() #> $rule_1 #> $rule_1$node_1 #> $rule_1$node_1$start #> [1] 1 4 #>  #> $rule_1$node_1$end #> [1]  1 22 #>  #>  #> $rule_1$node_2 #> $rule_1$node_2$start #> [1] 3 4 #>  #> $rule_1$node_2$end #> [1]  3 22 #>  #>  #>  #> $rule_2 #> $rule_2$node_1 #> $rule_2$node_1$start #> [1] 2 4 #>  #> $rule_2$node_1$end #> [1]  2 11 #>  #>  #>"},{"path":"/reference/node-text.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the code corresponding to one or several nodes — node-text","title":"Extract the code corresponding to one or several nodes — node-text","text":"functions extract code corresponding node(s): node_text() applies single node, example output node_get_match() node_text_all() applies list nodes, example output node_get_multiple_matches()","code":""},{"path":"/reference/node-text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the code corresponding to one or several nodes — node-text","text":"","code":"node_text(x)  node_text_all(x)"},{"path":"/reference/node-text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the code corresponding to one or several nodes — node-text","text":"x node, either tree_root() another node_*() function.","code":""},{"path":"/reference/node-text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the code corresponding to one or several nodes — node-text","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     plot(mtcars)     any(duplicated(x))\"  root <- src |>   tree_new() |>   tree_root()  # node_text() must be applied on single nodes root |>   node_find(ast_rule(pattern = \"plot($A)\")) |>   node_text() #> $rule_1 #> [1] \"plot(mtcars)\" #>   # node_find_all() returns a list on nodes on which # we can use node_text_all() root |>   node_find_all(ast_rule(pattern = \"any(duplicated($A))\")) |>   node_text_all() #> $rule_1 #> $rule_1$node_1 #> [1] \"any(duplicated(y))\" #>  #> $rule_1$node_2 #> [1] \"any(duplicated(x))\" #>  #>"},{"path":"/reference/node-traversal.html","id":null,"dir":"Reference","previous_headings":"","what":"Navigate the tree — node-traversal","title":"Navigate the tree — node-traversal","text":"collection functions used navigate tree. variant applies single node (e.g. node_next()) one applies list nodes (e.g. node_next_all()): node_prev(), node_prev_all(), node_next(), node_next_all() get previous next node(s) depth current node; node_parent(), node_ancestors(), node_child() node_children() get node(s) current node terms depth. nodes except root node least one node (root).","code":""},{"path":"/reference/node-traversal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Navigate the tree — node-traversal","text":"","code":"node_parent(x)  node_child(x, nth)  node_ancestors(x)  node_children(x)  node_next(x)  node_next_all(x)  node_prev(x)  node_prev_all(x)"},{"path":"/reference/node-traversal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Navigate the tree — node-traversal","text":"x node, either tree_root() another node_*() function. nth Integer. child node find. 0-indexed, setting nth = 0 gets first child.","code":""},{"path":"/reference/node-traversal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Navigate the tree — node-traversal","text":"","code":"### get the previous/next node ---------------------------  src <- \" print('hi there') a <- 1 fn <- function(x) {   x + 1 } \" root <- src |>   tree_new() |>   tree_root()  root |>   node_find(ast_rule(pattern = \"a <- $A\")) |>   node_prev() |>   node_text() #> $rule_1 #> [1] \"print('hi there')\" #>   root |>   node_find(ast_rule(pattern = \"a <- $A\")) |>   node_next() |>   node_text() #> $rule_1 #> [1] \"fn <- function(x) {\\n  x + 1\\n}\" #>   # there are nodes inside the function, but there are no more nodes on the # same level as \"fn\" root |>   node_find(ast_rule(pattern = \"a <- $A\")) |>   node_next_all() |>   node_text_all() #> $rule_1 #> $rule_1[[1]] #> [1] \"fn <- function(x) {\\n  x + 1\\n}\" #>  #>    ### get the parent/child node ---------------------------  src <- \" print('hi there') a <- 1 fn <- function(x) {   x + 1 } \" root <- src |>   tree_new() |>   tree_root()  root |>   node_find(ast_rule(pattern = \"$VAR + 1\")) |>   node_parent() |>   node_text() #> $rule_1 #> [1] \"{\\n  x + 1\\n}\" #>   root |>   node_find(ast_rule(pattern = \"$VAR + 1\")) |>   node_ancestors() |>   node_text_all() #> $rule_1 #> $rule_1[[1]] #> [1] \"{\\n  x + 1\\n}\" #>  #> $rule_1[[2]] #> [1] \"function(x) {\\n  x + 1\\n}\" #>  #> $rule_1[[3]] #> [1] \"fn <- function(x) {\\n  x + 1\\n}\" #>  #> $rule_1[[4]] #> [1] \"print('hi there')\\na <- 1\\nfn <- function(x) {\\n  x + 1\\n}\\n\" #>  #>   root |>   node_find(ast_rule(pattern = \"$VAR + 1\")) |>   node_child(0) |>   node_text() #> $rule_1 #> [1] \"x\" #>   root |>   node_find(ast_rule(pattern = \"$VAR + 1\")) |>   node_children() |>   node_text_all() #> $rule_1 #> $rule_1[[1]] #> [1] \"x\" #>  #> $rule_1[[2]] #> [1] \"+\" #>  #> $rule_1[[3]] #> [1] \"1\" #>  #>"},{"path":"/reference/node_get_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Recover the tree root from a node — node_get_root","title":"Recover the tree root from a node — node_get_root","text":"Recover tree root node","code":""},{"path":"/reference/node_get_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recover the tree root from a node — node_get_root","text":"","code":"node_get_root(x)"},{"path":"/reference/node_get_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recover the tree root from a node — node_get_root","text":"x node, either tree_root() another node_*() function.","code":""},{"path":"/reference/node_get_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recover the tree root from a node — node_get_root","text":"","code":"src <- \" print('hi') fn <- function() {   print('hello') } \" root <- src |>   tree_new() |>   tree_root()  root |>   node_find(ast_rule(pattern = \"print($A)\")) |>   node_get_root() |>   tree_root() |>   node_text() #> [[1]] #> [1] \"print('hi')\\nfn <- function() {\\n  print('hello')\\n}\\n\" #>"},{"path":"/reference/node_kind.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the kind of a node — node_kind","title":"Find the kind of a node — node_kind","text":"Find kind node","code":""},{"path":"/reference/node_kind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the kind of a node — node_kind","text":"","code":"node_kind(x)"},{"path":"/reference/node_kind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the kind of a node — node_kind","text":"x node, either tree_root() another node_*() function.","code":""},{"path":"/reference/node_kind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the kind of a node — node_kind","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     x <- z + 1     any(duplicated(x))\"  root <- src |>   tree_new() |>   tree_root()  root |>   node_find(ast_rule(pattern = \"any(duplicated($VAR))\")) |>   node_kind() #> $rule_1 #> [1] \"call\" #>   root |>   node_find(ast_rule(pattern = \"$X + $VALUE\")) |>   node_kind() #> $rule_1 #> [1] \"binary_operator\" #>"},{"path":"/reference/pattern_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a pattern rule — pattern_rule","title":"Build a pattern rule — pattern_rule","text":"specific type rule. can used general ruleset built ast_rule().","code":""},{"path":"/reference/pattern_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a pattern rule — pattern_rule","text":"","code":"pattern_rule(selector = NULL, context = NULL, strictness = \"smart\")"},{"path":"/reference/pattern_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a pattern rule — pattern_rule","text":"selector Defines surrounding code helps resolve ambiguity syntax. context Defines sub-syntax node kind actual matcher pattern. strictness Optional, defines strictly pattern match nodes. See 'Details'.","code":""},{"path":"/reference/pattern_rule.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a pattern rule — pattern_rule","text":"strictness parameter defines type nodes ast-grep matcher consider. following values: cst: nodes pattern target code must matched. node skipped. smart: nodes pattern must matched, skip unnamed nodes target code. default behavior. ast: named AST nodes pattern target code matched. unnamed nodes skipped. relaxed: Named AST nodes pattern target code matched. Comments unnamed nodes ignored. signature: named AST nodes' kinds matched. Comments, unnamed nodes text ignored. information: https://ast-grep.github.io/guide/rule-config/atomic-rule.html#pattern-object","code":""},{"path":"/reference/relational_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a relational rule — relational_rule","title":"Build a relational rule — relational_rule","text":"Build relational rule","code":""},{"path":"/reference/relational_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a relational rule — relational_rule","text":"","code":"relational_rule(stopBy = \"neighbor\", field = NULL, regex = NULL)"},{"path":"/reference/relational_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a relational rule — relational_rule","text":"stopBy todo field todo regex todo","code":""},{"path":"/reference/tree_new.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a syntax tree — tree_new","title":"Create a syntax tree — tree_new","text":"function takes R code string creates corresponding abstract syntax tree (AST) can query nodes.","code":""},{"path":"/reference/tree_new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a syntax tree — tree_new","text":"","code":"tree_new(txt, file)"},{"path":"/reference/tree_new.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a syntax tree — tree_new","text":"txt character string length 1 containing code parse. provided, file must provided. file Path file containing code parse. provided, txt must provided.","code":""},{"path":"/reference/tree_new.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a syntax tree — tree_new","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     plot(x)     any(duplicated(x))\"  tree_new(src) #> <pointer: 0x55b253329e20> #> attr(,\"class\") #> [1] \"SgRoot\""},{"path":"/reference/tree_root.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the root of the syntax tree — tree_root","title":"Get the root of the syntax tree — tree_root","text":"function takes tree created tree_new() returns root node containing subsequent nodes.","code":""},{"path":"/reference/tree_root.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the root of the syntax tree — tree_root","text":"","code":"tree_root(x)"},{"path":"/reference/tree_root.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the root of the syntax tree — tree_root","text":"x tree created tree_new().","code":""},{"path":"/reference/tree_root.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the root of the syntax tree — tree_root","text":"","code":"src <- \"x <- rnorm(100, mean = 2)     any(duplicated(y))     plot(x)     any(duplicated(x))\"  tree <- tree_new(src) tree_root(tree) #> <AST node>"}]
